/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { CursorNoticeSimple, GetNoticePageParams, NoticeDetail } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 공지 목록 조회
 */
export const getNoticePage = (params?: GetNoticePageParams, signal?: AbortSignal) => {
  return axiosInstance<CursorNoticeSimple>({ url: `/notices`, method: 'get', params, signal });
};

export const getGetNoticePageQueryKey = (params?: GetNoticePageParams) => [`/notices`, ...(params ? [params] : [])];

export type GetNoticePageInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getNoticePage>>>;
export type GetNoticePageInfiniteQueryError = ErrorType<unknown>;

export const useGetNoticePageInfinite = <
  TData = Awaited<ReturnType<typeof getNoticePage>>,
  TError = ErrorType<unknown>,
>(
  params?: GetNoticePageParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNoticePage>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNoticePageQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNoticePage>>> = ({ signal }) =>
    getNoticePage(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getNoticePage>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetNoticePageQueryResult = NonNullable<Awaited<ReturnType<typeof getNoticePage>>>;
export type GetNoticePageQueryError = ErrorType<unknown>;

export const useGetNoticePage = <TData = Awaited<ReturnType<typeof getNoticePage>>, TError = ErrorType<unknown>>(
  params?: GetNoticePageParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getNoticePage>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNoticePageQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNoticePage>>> = ({ signal }) =>
    getNoticePage(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getNoticePage>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary 공지 상세 조회
 */
export const getNoticeDetail = (noticeId: number, signal?: AbortSignal) => {
  return axiosInstance<NoticeDetail>({ url: `/notices/${noticeId}`, method: 'get', signal });
};

export const getGetNoticeDetailQueryKey = (noticeId: number) => [`/notices/${noticeId}`];

export type GetNoticeDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getNoticeDetail>>>;
export type GetNoticeDetailInfiniteQueryError = ErrorType<unknown>;

export const useGetNoticeDetailInfinite = <
  TData = Awaited<ReturnType<typeof getNoticeDetail>>,
  TError = ErrorType<unknown>,
>(
  noticeId: number,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNoticeDetail>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNoticeDetailQueryKey(noticeId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNoticeDetail>>> = ({ signal }) =>
    getNoticeDetail(noticeId, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getNoticeDetail>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!noticeId,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetNoticeDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getNoticeDetail>>>;
export type GetNoticeDetailQueryError = ErrorType<unknown>;

export const useGetNoticeDetail = <TData = Awaited<ReturnType<typeof getNoticeDetail>>, TError = ErrorType<unknown>>(
  noticeId: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getNoticeDetail>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNoticeDetailQueryKey(noticeId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNoticeDetail>>> = ({ signal }) =>
    getNoticeDetail(noticeId, signal);

  const query = useQuery<Awaited<ReturnType<typeof getNoticeDetail>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!noticeId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
