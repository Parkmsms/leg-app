/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  UserJoinReq,
  PhoneDto,
  NicknameDto,
  ChangeDeviceReq,
  ZoneCodeDto,
  Psu,
  ChangeProfileReq,
  EmailDto,
  UserSimple,
  UserDetail,
} from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 유저 가입
 */
export const joinUser = (userJoinReq: UserJoinReq) => {
  return axiosInstance<boolean>({
    url: `/users`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: userJoinReq,
  });
};

export type JoinUserMutationResult = NonNullable<Awaited<ReturnType<typeof joinUser>>>;
export type JoinUserMutationBody = UserJoinReq;
export type JoinUserMutationError = ErrorType<unknown>;

export const useJoinUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof joinUser>>, TError, { data: UserJoinReq }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof joinUser>>, { data: UserJoinReq }> = props => {
    const { data } = props ?? {};

    return joinUser(data);
  };

  return useMutation<Awaited<ReturnType<typeof joinUser>>, TError, { data: UserJoinReq }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * true : 이미 존재하는 휴대폰
 * @summary 휴대폰 중복 체크
 */
export const checkExistPhone = (phoneDto: PhoneDto) => {
  return axiosInstance<boolean>({
    url: `/users/phone/dup`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: phoneDto,
  });
};

export type CheckExistPhoneMutationResult = NonNullable<Awaited<ReturnType<typeof checkExistPhone>>>;
export type CheckExistPhoneMutationBody = PhoneDto;
export type CheckExistPhoneMutationError = ErrorType<unknown>;

export const useCheckExistPhone = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof checkExistPhone>>, TError, { data: PhoneDto }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkExistPhone>>, { data: PhoneDto }> = props => {
    const { data } = props ?? {};

    return checkExistPhone(data);
  };

  return useMutation<Awaited<ReturnType<typeof checkExistPhone>>, TError, { data: PhoneDto }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * true : 이미 존재하는 닉네임
 * @summary 닉네임 중복 체크
 */
export const checkExistNickname = (nicknameDto: NicknameDto) => {
  return axiosInstance<boolean>({
    url: `/users/nickname/dup`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: nicknameDto,
  });
};

export type CheckExistNicknameMutationResult = NonNullable<Awaited<ReturnType<typeof checkExistNickname>>>;
export type CheckExistNicknameMutationBody = NicknameDto;
export type CheckExistNicknameMutationError = ErrorType<unknown>;

export const useCheckExistNickname = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checkExistNickname>>,
    TError,
    { data: NicknameDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof checkExistNickname>>, { data: NicknameDto }> = props => {
    const { data } = props ?? {};

    return checkExistNickname(data);
  };

  return useMutation<Awaited<ReturnType<typeof checkExistNickname>>, TError, { data: NicknameDto }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * (로그인 전)
 * @summary 유저 기기 등록
 */
export const changeDevice = (changeDeviceReq: ChangeDeviceReq) => {
  return axiosInstance<boolean>({
    url: `/users/device`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: changeDeviceReq,
  });
};

export type ChangeDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof changeDevice>>>;
export type ChangeDeviceMutationBody = ChangeDeviceReq;
export type ChangeDeviceMutationError = ErrorType<unknown>;

export const useChangeDevice = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof changeDevice>>, TError, { data: ChangeDeviceReq }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeDevice>>, { data: ChangeDeviceReq }> = props => {
    const { data } = props ?? {};

    return changeDevice(data);
  };

  return useMutation<Awaited<ReturnType<typeof changeDevice>>, TError, { data: ChangeDeviceReq }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 유저 동네 변경
 */
export const changeZone = (zoneCodeDto: ZoneCodeDto) => {
  return axiosInstance<boolean>({
    url: `/users/town`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: zoneCodeDto,
  });
};

export type ChangeZoneMutationResult = NonNullable<Awaited<ReturnType<typeof changeZone>>>;
export type ChangeZoneMutationBody = ZoneCodeDto;
export type ChangeZoneMutationError = ErrorType<unknown>;

export const useChangeZone = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof changeZone>>, TError, { data: ZoneCodeDto }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeZone>>, { data: ZoneCodeDto }> = props => {
    const { data } = props ?? {};

    return changeZone(data);
  };

  return useMutation<Awaited<ReturnType<typeof changeZone>>, TError, { data: ZoneCodeDto }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 유저 프로필사진 변경
 */
export const changeProfile = (changeProfileReq: ChangeProfileReq) => {
  return axiosInstance<Psu>({
    url: `/users/profile`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: changeProfileReq,
  });
};

export type ChangeProfileMutationResult = NonNullable<Awaited<ReturnType<typeof changeProfile>>>;
export type ChangeProfileMutationBody = ChangeProfileReq;
export type ChangeProfileMutationError = ErrorType<unknown>;

export const useChangeProfile = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changeProfile>>,
    TError,
    { data: ChangeProfileReq },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeProfile>>, { data: ChangeProfileReq }> = props => {
    const { data } = props ?? {};

    return changeProfile(data);
  };

  return useMutation<Awaited<ReturnType<typeof changeProfile>>, TError, { data: ChangeProfileReq }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 유저 닉네임 변경
 */
export const changeNickname = (nicknameDto: NicknameDto) => {
  return axiosInstance<boolean>({
    url: `/users/nickname`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: nicknameDto,
  });
};

export type ChangeNicknameMutationResult = NonNullable<Awaited<ReturnType<typeof changeNickname>>>;
export type ChangeNicknameMutationBody = NicknameDto;
export type ChangeNicknameMutationError = ErrorType<unknown>;

export const useChangeNickname = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof changeNickname>>, TError, { data: NicknameDto }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeNickname>>, { data: NicknameDto }> = props => {
    const { data } = props ?? {};

    return changeNickname(data);
  };

  return useMutation<Awaited<ReturnType<typeof changeNickname>>, TError, { data: NicknameDto }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 유저 이메일 변경
 */
export const changeEmail = (emailDto: EmailDto) => {
  return axiosInstance<boolean>({
    url: `/users/email`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: emailDto,
  });
};

export type ChangeEmailMutationResult = NonNullable<Awaited<ReturnType<typeof changeEmail>>>;
export type ChangeEmailMutationBody = EmailDto;
export type ChangeEmailMutationError = ErrorType<unknown>;

export const useChangeEmail = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof changeEmail>>, TError, { data: EmailDto }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof changeEmail>>, { data: EmailDto }> = props => {
    const { data } = props ?? {};

    return changeEmail(data);
  };

  return useMutation<Awaited<ReturnType<typeof changeEmail>>, TError, { data: EmailDto }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 유저 간략 조회
 */
export const getUserSimple = (signal?: AbortSignal) => {
  return axiosInstance<UserSimple>({ url: `/users/simple`, method: 'get', signal });
};

export const getGetUserSimpleQueryKey = () => [`/users/simple`];

export type GetUserSimpleInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSimple>>>;
export type GetUserSimpleInfiniteQueryError = ErrorType<unknown>;

export const useGetUserSimpleInfinite = <
  TData = Awaited<ReturnType<typeof getUserSimple>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserSimple>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserSimpleQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSimple>>> = ({ signal }) => getUserSimple(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getUserSimple>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetUserSimpleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSimple>>>;
export type GetUserSimpleQueryError = ErrorType<unknown>;

export const useGetUserSimple = <
  TData = Awaited<ReturnType<typeof getUserSimple>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUserSimple>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserSimpleQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserSimple>>> = ({ signal }) => getUserSimple(signal);

  const query = useQuery<Awaited<ReturnType<typeof getUserSimple>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary 유저 상세 조회
 */
export const getUserDetail = (signal?: AbortSignal) => {
  return axiosInstance<UserDetail>({ url: `/users/detail`, method: 'get', signal });
};

export const getGetUserDetailQueryKey = () => [`/users/detail`];

export type GetUserDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetail>>>;
export type GetUserDetailInfiniteQueryError = ErrorType<unknown>;

export const useGetUserDetailInfinite = <
  TData = Awaited<ReturnType<typeof getUserDetail>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserDetailQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetail>>> = ({ signal }) => getUserDetail(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetUserDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getUserDetail>>>;
export type GetUserDetailQueryError = ErrorType<unknown>;

export const useGetUserDetail = <
  TData = Awaited<ReturnType<typeof getUserDetail>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserDetailQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserDetail>>> = ({ signal }) => getUserDetail(signal);

  const query = useQuery<Awaited<ReturnType<typeof getUserDetail>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
