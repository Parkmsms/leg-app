/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { CursorEventSimple, GetEventListParams, EventDetail } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 이벤트 목록 조회
 */
export const getEventList = (params?: GetEventListParams, signal?: AbortSignal) => {
  return axiosInstance<CursorEventSimple>({ url: `/events`, method: 'get', params, signal });
};

export const getGetEventListQueryKey = (params?: GetEventListParams) => [`/events`, ...(params ? [params] : [])];

export type GetEventListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getEventList>>>;
export type GetEventListInfiniteQueryError = ErrorType<unknown>;

export const useGetEventListInfinite = <TData = Awaited<ReturnType<typeof getEventList>>, TError = ErrorType<unknown>>(
  params?: GetEventListParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventList>>> = ({ signal }) => getEventList(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getEventList>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetEventListQueryResult = NonNullable<Awaited<ReturnType<typeof getEventList>>>;
export type GetEventListQueryError = ErrorType<unknown>;

export const useGetEventList = <TData = Awaited<ReturnType<typeof getEventList>>, TError = ErrorType<unknown>>(
  params?: GetEventListParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getEventList>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventList>>> = ({ signal }) => getEventList(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getEventList>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary 이벤트 상세 조회
 */
export const getEventDetail = (eventId: number, signal?: AbortSignal) => {
  return axiosInstance<EventDetail>({ url: `/events/${eventId}`, method: 'get', signal });
};

export const getGetEventDetailQueryKey = (eventId: number) => [`/events/${eventId}`];

export type GetEventDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getEventDetail>>>;
export type GetEventDetailInfiniteQueryError = ErrorType<unknown>;

export const useGetEventDetailInfinite = <
  TData = Awaited<ReturnType<typeof getEventDetail>>,
  TError = ErrorType<unknown>,
>(
  eventId: number,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getEventDetail>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventDetailQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventDetail>>> = ({ signal }) =>
    getEventDetail(eventId, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getEventDetail>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetEventDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getEventDetail>>>;
export type GetEventDetailQueryError = ErrorType<unknown>;

export const useGetEventDetail = <TData = Awaited<ReturnType<typeof getEventDetail>>, TError = ErrorType<unknown>>(
  eventId: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getEventDetail>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetEventDetailQueryKey(eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventDetail>>> = ({ signal }) =>
    getEventDetail(eventId, signal);

  const query = useQuery<Awaited<ReturnType<typeof getEventDetail>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!eventId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
