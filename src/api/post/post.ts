/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { CursorPostSimple, GetPostsParams, PostDetail } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * [3km Ïù¥ÎÇ¥ Í±∞Î¶¨ Í∞ÄÍ≤å Í∏ÄÎßå Ï∂îÏ∂ú]<br/>[Í≤ÄÏÉâÏñ¥(search) : Ï†úÎ™©, Í∏Ä ÎÇ¥Ïö©, ÏùåÏãù Ï¢ÖÎ•òÏóê ÎåÄÌïú ÏÇ¨Ïö©ÏûêÏùò Í≤ÄÏÉâÏñ¥]<br/>[Ï†ïÎ†¨(sort) : DISTANCE, ORDER, STAR, REVIEW]<br/>[ÏùåÏãù Ï¢ÖÎ•ò(FoodType) : Ï†ÑÏ≤¥, ÏπòÌÇ®, ÌîºÏûê, ÌñÑÎ≤ÑÍ±∞, Ï°±Î∞ú\_Î≥¥Ïåà, Î∂ÑÏãù, Ïπ¥Ìéò\_ÎîîÏ†ÄÌä∏, ÏÉêÎü¨Îìú\_ÏÉåÎìúÏúÑÏπò, ÎèÑÏãúÎùΩ, ÌïúÏãù, Ï§ëÏãù, ÏùºÏãù, Í∑∏Ïô∏]
 * @summary Í∑ºÏ≤ò Í∞ÄÍ≤å Í∏Ä Î¶¨Ïä§Ìä∏ Î∞òÌôò
 */
export const getPosts = (params?: GetPostsParams, signal?: AbortSignal) => {
  return axiosInstance<CursorPostSimple>({ url: `/posts`, method: 'get', params, signal });
};

export const getGetPostsQueryKey = (params?: GetPostsParams) => [`/posts`, ...(params ? [params] : [])];

export type GetPostsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>;
export type GetPostsInfiniteQueryError = ErrorType<unknown>;

export const useGetPostsInfinite = <TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorType<unknown>>(
  params?: GetPostsParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getPosts>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>;
export type GetPostsQueryError = ErrorType<unknown>;

export const useGetPosts = <TData = Awaited<ReturnType<typeof getPosts>>, TError = ErrorType<unknown>>(
  params?: GetPostsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getPosts>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Í∞ÄÍ≤å Í∏Ä ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Î∞òÌôò
 */
export const getPostDetail = (postId: number, signal?: AbortSignal) => {
  return axiosInstance<PostDetail>({ url: `/posts/${postId}/info`, method: 'get', signal });
};

export const getGetPostDetailQueryKey = (postId: number) => [`/posts/${postId}/info`];

export type GetPostDetailInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPostDetail>>>;
export type GetPostDetailInfiniteQueryError = ErrorType<unknown>;

export const useGetPostDetailInfinite = <
  TData = Awaited<ReturnType<typeof getPostDetail>>,
  TError = ErrorType<unknown>,
>(
  postId: number,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPostDetail>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostDetailQueryKey(postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostDetail>>> = ({ signal }) =>
    getPostDetail(postId, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getPostDetail>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!postId,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetPostDetailQueryResult = NonNullable<Awaited<ReturnType<typeof getPostDetail>>>;
export type GetPostDetailQueryError = ErrorType<unknown>;

export const useGetPostDetail = <TData = Awaited<ReturnType<typeof getPostDetail>>, TError = ErrorType<unknown>>(
  postId: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getPostDetail>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostDetailQueryKey(postId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPostDetail>>> = ({ signal }) =>
    getPostDetail(postId, signal);

  const query = useQuery<Awaited<ReturnType<typeof getPostDetail>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!postId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
