/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { CursorZoneSimple, GetNearlyZonesParams } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 동네 검색 (가까운 순)
 */
export const getNearlyZones = (params: GetNearlyZonesParams, signal?: AbortSignal) => {
  return axiosInstance<CursorZoneSimple>({ url: `/zones`, method: 'get', params, signal });
};

export const getGetNearlyZonesQueryKey = (params: GetNearlyZonesParams) => [`/zones`, ...(params ? [params] : [])];

export type GetNearlyZonesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getNearlyZones>>>;
export type GetNearlyZonesInfiniteQueryError = ErrorType<unknown>;

export const useGetNearlyZonesInfinite = <
  TData = Awaited<ReturnType<typeof getNearlyZones>>,
  TError = ErrorType<unknown>,
>(
  params: GetNearlyZonesParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getNearlyZones>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNearlyZonesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNearlyZones>>> = ({ signal }) =>
    getNearlyZones(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getNearlyZones>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetNearlyZonesQueryResult = NonNullable<Awaited<ReturnType<typeof getNearlyZones>>>;
export type GetNearlyZonesQueryError = ErrorType<unknown>;

export const useGetNearlyZones = <TData = Awaited<ReturnType<typeof getNearlyZones>>, TError = ErrorType<unknown>>(
  params: GetNearlyZonesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getNearlyZones>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNearlyZonesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNearlyZones>>> = ({ signal }) =>
    getNearlyZones(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getNearlyZones>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
