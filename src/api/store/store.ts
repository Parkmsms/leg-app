/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { StoreJoinResp, StoreJoinReq, DistanceResp, GetBetweenDistanceParams } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 가게 등록
 */
export const registerStore = (storeJoinReq: StoreJoinReq) => {
  return axiosInstance<StoreJoinResp>({
    url: `/stores`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: storeJoinReq,
  });
};

export type RegisterStoreMutationResult = NonNullable<Awaited<ReturnType<typeof registerStore>>>;
export type RegisterStoreMutationBody = StoreJoinReq;
export type RegisterStoreMutationError = ErrorType<unknown>;

export const useRegisterStore = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof registerStore>>, TError, { data: StoreJoinReq }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerStore>>, { data: StoreJoinReq }> = props => {
    const { data } = props ?? {};

    return registerStore(data);
  };

  return useMutation<Awaited<ReturnType<typeof registerStore>>, TError, { data: StoreJoinReq }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 현재 유저와 가게까지의 거리 조회 (유저)
 */
export const getBetweenDistance = (storeId: number, params: GetBetweenDistanceParams, signal?: AbortSignal) => {
  return axiosInstance<DistanceResp>({ url: `/stores/${storeId}/distance`, method: 'get', params, signal });
};

export const getGetBetweenDistanceQueryKey = (storeId: number, params: GetBetweenDistanceParams) => [
  `/stores/${storeId}/distance`,
  ...(params ? [params] : []),
];

export type GetBetweenDistanceInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBetweenDistance>>>;
export type GetBetweenDistanceInfiniteQueryError = ErrorType<unknown>;

export const useGetBetweenDistanceInfinite = <
  TData = Awaited<ReturnType<typeof getBetweenDistance>>,
  TError = ErrorType<unknown>,
>(
  storeId: number,
  params: GetBetweenDistanceParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBetweenDistance>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBetweenDistanceQueryKey(storeId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBetweenDistance>>> = ({ signal }) =>
    getBetweenDistance(storeId, params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getBetweenDistance>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!storeId,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetBetweenDistanceQueryResult = NonNullable<Awaited<ReturnType<typeof getBetweenDistance>>>;
export type GetBetweenDistanceQueryError = ErrorType<unknown>;

export const useGetBetweenDistance = <
  TData = Awaited<ReturnType<typeof getBetweenDistance>>,
  TError = ErrorType<unknown>,
>(
  storeId: number,
  params: GetBetweenDistanceParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getBetweenDistance>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBetweenDistanceQueryKey(storeId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBetweenDistance>>> = ({ signal }) =>
    getBetweenDistance(storeId, params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getBetweenDistance>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!storeId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
