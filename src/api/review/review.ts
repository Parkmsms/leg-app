/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CursorReviewResp,
  GetStoreReviewsParams,
  Psu,
  ReviewWriteReq,
  GetRecently3ReviewImagesParams,
} from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 가게 리뷰 조회 (유저)
 */
export const getStoreReviews = (params: GetStoreReviewsParams, signal?: AbortSignal) => {
  return axiosInstance<CursorReviewResp>({ url: `/reviews`, method: 'get', params, signal });
};

export const getGetStoreReviewsQueryKey = (params: GetStoreReviewsParams) => [`/reviews`, ...(params ? [params] : [])];

export type GetStoreReviewsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStoreReviews>>>;
export type GetStoreReviewsInfiniteQueryError = ErrorType<unknown>;

export const useGetStoreReviewsInfinite = <
  TData = Awaited<ReturnType<typeof getStoreReviews>>,
  TError = ErrorType<unknown>,
>(
  params: GetStoreReviewsParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStoreReviews>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoreReviewsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStoreReviews>>> = ({ signal }) =>
    getStoreReviews(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getStoreReviews>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetStoreReviewsQueryResult = NonNullable<Awaited<ReturnType<typeof getStoreReviews>>>;
export type GetStoreReviewsQueryError = ErrorType<unknown>;

export const useGetStoreReviews = <TData = Awaited<ReturnType<typeof getStoreReviews>>, TError = ErrorType<unknown>>(
  params: GetStoreReviewsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getStoreReviews>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStoreReviewsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStoreReviews>>> = ({ signal }) =>
    getStoreReviews(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getStoreReviews>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary 리뷰 생성 (유저)
 */
export const writeReview = (reviewWriteReq: ReviewWriteReq) => {
  return axiosInstance<Psu[]>({
    url: `/reviews`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: reviewWriteReq,
  });
};

export type WriteReviewMutationResult = NonNullable<Awaited<ReturnType<typeof writeReview>>>;
export type WriteReviewMutationBody = ReviewWriteReq;
export type WriteReviewMutationError = ErrorType<unknown>;

export const useWriteReview = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof writeReview>>, TError, { data: ReviewWriteReq }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof writeReview>>, { data: ReviewWriteReq }> = props => {
    const { data } = props ?? {};

    return writeReview(data);
  };

  return useMutation<Awaited<ReturnType<typeof writeReview>>, TError, { data: ReviewWriteReq }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * @summary 최신 포토 리뷰 이미지 3개 조회 (유저)
 */
export const getRecently3ReviewImages = (params: GetRecently3ReviewImagesParams, signal?: AbortSignal) => {
  return axiosInstance<string[]>({ url: `/reviews/images/top3`, method: 'get', params, signal });
};

export const getGetRecently3ReviewImagesQueryKey = (params: GetRecently3ReviewImagesParams) => [
  `/reviews/images/top3`,
  ...(params ? [params] : []),
];

export type GetRecently3ReviewImagesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRecently3ReviewImages>>
>;
export type GetRecently3ReviewImagesInfiniteQueryError = ErrorType<unknown>;

export const useGetRecently3ReviewImagesInfinite = <
  TData = Awaited<ReturnType<typeof getRecently3ReviewImages>>,
  TError = ErrorType<unknown>,
>(
  params: GetRecently3ReviewImagesParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getRecently3ReviewImages>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecently3ReviewImagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecently3ReviewImages>>> = ({ signal }) =>
    getRecently3ReviewImages(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getRecently3ReviewImages>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetRecently3ReviewImagesQueryResult = NonNullable<Awaited<ReturnType<typeof getRecently3ReviewImages>>>;
export type GetRecently3ReviewImagesQueryError = ErrorType<unknown>;

export const useGetRecently3ReviewImages = <
  TData = Awaited<ReturnType<typeof getRecently3ReviewImages>>,
  TError = ErrorType<unknown>,
>(
  params: GetRecently3ReviewImagesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getRecently3ReviewImages>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecently3ReviewImagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecently3ReviewImages>>> = ({ signal }) =>
    getRecently3ReviewImages(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getRecently3ReviewImages>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary 리뷰 삭제 (유저)
 */
export const deleteReview = (reviewId: number) => {
  return axiosInstance<boolean>({ url: `/reviews/${reviewId}`, method: 'delete' });
};

export type DeleteReviewMutationResult = NonNullable<Awaited<ReturnType<typeof deleteReview>>>;

export type DeleteReviewMutationError = ErrorType<unknown>;

export const useDeleteReview = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteReview>>, TError, { reviewId: number }, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteReview>>, { reviewId: number }> = props => {
    const { reviewId } = props ?? {};

    return deleteReview(reviewId);
  };

  return useMutation<Awaited<ReturnType<typeof deleteReview>>, TError, { reviewId: number }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
