/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query';
import type { UseMutationOptions, MutationFunction } from '@tanstack/react-query';
import type { ChangeStaffDeviceReq } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * 있으면 변경, 없으면 생성
 * @summary 직원 로그인을 위한 디바이스 등록 (휴대폰 인증번호 검증된 후 요청)
 */
export const updateDevice = (changeStaffDeviceReq: ChangeStaffDeviceReq) => {
  return axiosInstance<boolean>({
    url: `/staffs/device`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: changeStaffDeviceReq,
  });
};

export type UpdateDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof updateDevice>>>;
export type UpdateDeviceMutationBody = ChangeStaffDeviceReq;
export type UpdateDeviceMutationError = ErrorType<unknown>;

export const useUpdateDevice = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateDevice>>,
    TError,
    { data: ChangeStaffDeviceReq },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateDevice>>,
    { data: ChangeStaffDeviceReq }
  > = props => {
    const { data } = props ?? {};

    return updateDevice(data);
  };

  return useMutation<Awaited<ReturnType<typeof updateDevice>>, TError, { data: ChangeStaffDeviceReq }, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * 퇴근시 비활성화 하여 주문 관련 알림 끄기
 * @summary 직원 비활성화
 */
export const inactiveStaff = () => {
  return axiosInstance<boolean>({ url: `/staffs/inactive`, method: 'patch' });
};

export type InactiveStaffMutationResult = NonNullable<Awaited<ReturnType<typeof inactiveStaff>>>;

export type InactiveStaffMutationError = ErrorType<unknown>;

export const useInactiveStaff = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof inactiveStaff>>, TError, TVariables, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof inactiveStaff>>, TVariables> = () => {
    return inactiveStaff();
  };

  return useMutation<Awaited<ReturnType<typeof inactiveStaff>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  );
};
/**
 * 출근시 활성화 하여 주문 관련 알림 켜기
 * @summary 직원 활성화
 */
export const activeStaff = () => {
  return axiosInstance<boolean>({ url: `/staffs/active`, method: 'patch' });
};

export type ActiveStaffMutationResult = NonNullable<Awaited<ReturnType<typeof activeStaff>>>;

export type ActiveStaffMutationError = ErrorType<unknown>;

export const useActiveStaff = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof activeStaff>>, TError, TVariables, TContext>;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activeStaff>>, TVariables> = () => {
    return activeStaff();
  };

  return useMutation<Awaited<ReturnType<typeof activeStaff>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  );
};
