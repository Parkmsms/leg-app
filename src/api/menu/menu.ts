/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { BigCategoryResp, GetBigMenuParams, SmallCategoryResp, GetSmallMenuParams } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 대메뉴 목록 반환
 */
export const getBigMenu = (params: GetBigMenuParams, signal?: AbortSignal) => {
  return axiosInstance<BigCategoryResp[]>({ url: `/menu`, method: 'get', params, signal });
};

export const getGetBigMenuQueryKey = (params: GetBigMenuParams) => [`/menu`, ...(params ? [params] : [])];

export type GetBigMenuInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBigMenu>>>;
export type GetBigMenuInfiniteQueryError = ErrorType<unknown>;

export const useGetBigMenuInfinite = <TData = Awaited<ReturnType<typeof getBigMenu>>, TError = ErrorType<unknown>>(
  params: GetBigMenuParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBigMenu>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBigMenuQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBigMenu>>> = ({ signal }) => getBigMenu(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getBigMenu>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetBigMenuQueryResult = NonNullable<Awaited<ReturnType<typeof getBigMenu>>>;
export type GetBigMenuQueryError = ErrorType<unknown>;

export const useGetBigMenu = <TData = Awaited<ReturnType<typeof getBigMenu>>, TError = ErrorType<unknown>>(
  params: GetBigMenuParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getBigMenu>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetBigMenuQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getBigMenu>>> = ({ signal }) => getBigMenu(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getBigMenu>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary 소메뉴 목록 반환
 */
export const getSmallMenu = (menuId: number, params: GetSmallMenuParams, signal?: AbortSignal) => {
  return axiosInstance<SmallCategoryResp[]>({ url: `/menu/${menuId}`, method: 'get', params, signal });
};

export const getGetSmallMenuQueryKey = (menuId: number, params: GetSmallMenuParams) => [
  `/menu/${menuId}`,
  ...(params ? [params] : []),
];

export type GetSmallMenuInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getSmallMenu>>>;
export type GetSmallMenuInfiniteQueryError = ErrorType<unknown>;

export const useGetSmallMenuInfinite = <TData = Awaited<ReturnType<typeof getSmallMenu>>, TError = ErrorType<unknown>>(
  menuId: number,
  params: GetSmallMenuParams,
  options?: { query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSmallMenu>>, TError, TData> },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSmallMenuQueryKey(menuId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmallMenu>>> = ({ signal }) =>
    getSmallMenu(menuId, params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getSmallMenu>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!menuId,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetSmallMenuQueryResult = NonNullable<Awaited<ReturnType<typeof getSmallMenu>>>;
export type GetSmallMenuQueryError = ErrorType<unknown>;

export const useGetSmallMenu = <TData = Awaited<ReturnType<typeof getSmallMenu>>, TError = ErrorType<unknown>>(
  menuId: number,
  params: GetSmallMenuParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getSmallMenu>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSmallMenuQueryKey(menuId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSmallMenu>>> = ({ signal }) =>
    getSmallMenu(menuId, params, signal);

  const query = useQuery<Awaited<ReturnType<typeof getSmallMenu>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!menuId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
