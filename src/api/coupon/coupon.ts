/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * Leg User API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  QueryFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type { CouponSimple } from '.././types';
import { axiosInstance } from '../../../axios-instance';
import type { ErrorType } from '../../../axios-instance';

/**
 * @summary 유저 사용 가능 쿠폰 목록 조회
 */
export const getAvailableCoupons = (signal?: AbortSignal) => {
  return axiosInstance<CouponSimple[]>({ url: `/coupons`, method: 'get', signal });
};

export const getGetAvailableCouponsQueryKey = () => [`/coupons`];

export type GetAvailableCouponsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableCoupons>>>;
export type GetAvailableCouponsInfiniteQueryError = ErrorType<unknown>;

export const useGetAvailableCouponsInfinite = <
  TData = Awaited<ReturnType<typeof getAvailableCoupons>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAvailableCoupons>>, TError, TData>;
}): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAvailableCouponsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableCoupons>>> = ({ signal }) =>
    getAvailableCoupons(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof getAvailableCoupons>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export type GetAvailableCouponsQueryResult = NonNullable<Awaited<ReturnType<typeof getAvailableCoupons>>>;
export type GetAvailableCouponsQueryError = ErrorType<unknown>;

export const useGetAvailableCoupons = <
  TData = Awaited<ReturnType<typeof getAvailableCoupons>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getAvailableCoupons>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAvailableCouponsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAvailableCoupons>>> = ({ signal }) =>
    getAvailableCoupons(signal);

  const query = useQuery<Awaited<ReturnType<typeof getAvailableCoupons>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
